'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const extensionApi = require('@podman-desktop/api');

function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: 'Module' } });
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}

const extensionApi__namespace = /*#__PURE__*/_interopNamespaceDefault(extensionApi);

const SECOND = 1e9;
var path = require("path"), fs = require("fs");
function registerFromDir(startPath, filter, register) {
  if (!fs.existsSync(startPath)) {
    console.log("no dir ", startPath);
    return;
  }
  var files = fs.readdirSync(startPath);
  for (var i = 0; i < files.length; i++) {
    var filename = path.join(startPath, files[i]);
    var stat = fs.lstatSync(filename);
    if (stat.isDirectory()) {
      registerFromDir(filename, filter, register);
    } else if (filename.endsWith(filter)) {
      register(filename);
    }
  }
}
const AvailableModels = {};
let RAMALAMA_REMOTING_IMAGE = "quay.io/crcont/remoting:v0.10.0-remoting-0.2.1";
function reloadAvailableModels(extensionStoragePath) {
  Object.keys(AvailableModels).forEach((key) => delete AvailableModels[key]);
  console.log("go!");
  const registerModel = function(filename) {
    const dir_name = filename.split("/").at(-2);
    const name_parts = dir_name.split(".");
    const model_dir = name_parts.at(1);
    const model_name = name_parts.slice(2).join(".");
    const model_user_name = `${model_dir}/${model_name}`;
    AvailableModels[model_user_name] = filename;
    console.log(`found ${model_user_name}`);
  };
  registerFromDir(extensionStoragePath + "/../redhat.ai-lab/models", ".gguf", registerModel);
}
async function launchApirInferenceServer() {
  if (Object.keys(AvailableModels).length === 0) {
    await extensionApi__namespace.window.showErrorMessage("The list of models is empty. Please download models with Podman Desktop AI lab first.");
    return;
  }
  const model_name = "ibm-granite/granite-3.3-8b-instruct-GGUF";
  const imageInfo = await pullImage(
    RAMALAMA_REMOTING_IMAGE);
  const host_port = 1234;
  const model_src = AvailableModels[model_name];
  if (model_src === void 0) {
    throw new Error(`Couldn't get the file associated with model ${model_src}. This is unexpected.`);
  }
  const model_filename = path.basename(model_src);
  const model_dirname = path.basename(path.dirname(model_src));
  const model_dest = `/models/${model_filename}`;
  const labels = {
    ["ai-lab-inference-server"]: JSON.stringify([model_dirname]),
    ["api"]: `http://localhost:${host_port}/v1`,
    ["gpu"]: `llama.cpp API Remoting`,
    ["llama-cpp.apir"]: "true",
    ["trackingId"]: "idsfdf"
  };
  const mounts = [
    {
      Target: model_dest,
      Source: model_src,
      Type: "bind"
    }
  ];
  let entrypoint = void 0;
  let cmd = [];
  const envs = [`MODEL_PATH=${model_dest}`, "HOST=0.0.0.0", "PORT=8000", "GPU_LAYERS=999"];
  const devices = [];
  devices.push({
    PathOnHost: "/dev/dri",
    PathInContainer: "/dev/dri",
    CgroupPermissions: ""
  });
  const deviceRequests = [];
  deviceRequests.push({
    Capabilities: [["gpu"]],
    Count: -1
    // -1: all
  });
  const containerCreateOptions = {
    Image: imageInfo.Id,
    Detach: true,
    Entrypoint: entrypoint,
    Cmd: cmd,
    ExposedPorts: { [`${host_port}`]: {} },
    HostConfig: {
      AutoRemove: false,
      Devices: devices,
      Mounts: mounts,
      DeviceRequests: deviceRequests,
      SecurityOpt: ["label=disable"],
      PortBindings: {
        "8000/tcp": [
          {
            HostPort: `${host_port}`
          }
        ]
      }
    },
    HealthCheck: {
      // must be the port INSIDE the container not the exposed one
      Test: ["CMD-SHELL", `curl -sSf localhost:8000 > /dev/null`],
      Interval: SECOND * 5,
      Retries: 4 * 5
    },
    Labels: labels,
    Env: envs
  };
  console.log(containerCreateOptions, mounts);
  const { engineId, id } = await createContainer(imageInfo.engineId, containerCreateOptions);
}
async function createContainer(engineId, containerCreateOptions, labels) {
  console.log("Creating container ...");
  try {
    const result = await extensionApi.containerEngine.createContainer(engineId, containerCreateOptions);
    console.log("Container created!");
    return {
      id: result.id,
      engineId
    };
  } catch (err) {
    console.error(`Container creation failed :/ ${String(err)}`);
    throw err;
  }
}
async function pullImage(image, labels) {
  console.log(`Pulling the image ${image} ...`);
  const providers = extensionApi.provider.getContainerConnections();
  const podmanProvider = providers.filter(({ connection: connection2 }) => connection2.type === "podman");
  if (!podmanProvider) throw new Error(`cannot find podman provider`);
  let connection = podmanProvider[0].connection;
  return getImageInfo(connection, image).catch((err) => {
    console.error(`Something went wrong while pulling ${image}: ${String(err)}`);
    throw err;
  }).then((imageInfo) => {
    console.log("Image pulled successfully");
    return imageInfo;
  });
}
async function getImageInfo(connection, image, callback) {
  let imageInfo = void 0;
  try {
    imageInfo = (await extensionApi.containerEngine.listImages({
      provider: connection
    })).find((imageInfo2) => imageInfo2.RepoTags?.some((tag) => tag === image));
  } catch (err) {
    console.warn("Something went wrong while trying to get image inspect", err);
    await extensionApi__namespace.window.showErrorMessage(`Something went wrong while trying to get image inspect: ${err}`);
    throw err;
  }
  if (imageInfo === void 0) throw new Error(`image ${image} not found.`);
  return imageInfo;
}
async function activate(extensionContext) {
  if (!fs.existsSync(extensionContext.storagePath)) {
    fs.mkdirSync(extensionContext.storagePath);
  }
  console.error(`Loading the models ...`);
  reloadAvailableModels(extensionContext.storagePath);
  const menuCommand = extensionApi__namespace.commands.registerCommand("llama.cpp.apir.menu", async () => {
    if (!extensionApi__namespace.env.isMac && false) ;
    const CHOICES = [
      "Restart Podman Machine with API Remoting",
      "Restart Podman Machine with the default configuration",
      "Launch an API Remoting accelerated Inference Server"
    ];
    const result = CHOICES[2];
    try {
      if (result == CHOICES[0]) ; else if (result == CHOICES[1]) ; else if (result == CHOICES[2]) {
        await launchApirInferenceServer();
      }
    } catch (err) {
      console.error(`Task failed: ${String(err)}`);
      throw err;
    }
  });
  const item = extensionApi__namespace.window.createStatusBarItem(extensionApi__namespace.StatusBarAlignLeft, 100);
  item.text = "Llama.cpp API Remoting";
  item.command = "llama.cpp.apir.menu";
  item.show();
  extensionContext.subscriptions.push(menuCommand);
  extensionContext.subscriptions.push(item);
}
async function deactivate() {
}
async function restart_podman_machine(with_apir) {
  await extensionApi__namespace.window.showInformationMessage(`Restarting Podman machine ... (with APIR support: ${with_apir})`);
  try {
    const { stdout } = await extensionApi__namespace.process.exec("/usr/bin/echo", ["version"]);
    await extensionApi__namespace.window.showInformationMessage(`version: ${stdout}`);
    console.log(`version: ${stdout}`);
  } catch (error) {
    await extensionApi__namespace.window.showInformationMessage(`Error making binary executable: ${error}`);
    console.error(`Failed to execute command: ${error.message}`);
    throw new Error(`Error making binary executable: ${error}`);
  }
}

exports.SECOND = SECOND;
exports.activate = activate;
exports.deactivate = deactivate;
exports.restart_podman_machine = restart_podman_machine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
